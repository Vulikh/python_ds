"""
1. Создать список и заполнить его элементами различных типов данных.
Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа. 
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
"""
list_of_types = [
	1,
	2.0,
	'str',
	True,
	None,
	[],
	{None},
	(None,),
	{None:None}
]

for el in list_of_types:
	print(type(el))


"""
2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. 
При нечетном количестве элементов последний сохранить на своем месте. 
Для заполнения списка элементов необходимо использовать функцию input().
"""


arr = [int(i) for i in input('Введите элементы массива через пробел').split()]

if len(arr) > 0:
	for i in range(len(arr)-1):
		if i % 2 == 0:
			arr[i], arr[i+1] = arr[i+1], arr[i] 
else:
	print('Введен пустой массив')

print(f'Полученный массив {arr}')

"""
3. Пользователь вводит месяц в виде целого числа от 1 до 12. 
Сообщить к какому времени года относится месяц (зима, весна, лето, осень). 
Напишите решения через list и через dict.
"""

seasons = {'Зима':[12, 1, 2], 
			'Весна':[3, 4, 5],
			'Лето':[6, 7, 8],
			'Осень':[9, 10, 11] }

usr_s = int(input('Введите номер месяца (от 1 до 12)'))

if 0 > usr_s > 13:
	print("Указано неверное значение")
else:
	for key in seasons:
		if usr_s in seasons[key]:
			print(key)
			break

"""
4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
Вывести каждое слово с новой строки. Строки необходимо пронумеровать. 
Если в слово длинное, выводить только первые 10 букв в слове.
"""

words = input('Введите слова через пробел').split()

if len(words) > 0:
	for i in enumerate(words):
		print(i[0], i[1][:10])
else:
	print('Слова не введены')

"""
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. 
У пользователя необходимо запрашивать новый элемент рейтинга. 
Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].
"""

my_list = [7, 5, 4, 3, 3, 2]

el = int(input(f'Введите элемент для вставки в массив {my_list} '))

my_list.append(el)

N = len(my_list)

i = N - 1

while i > 0:
	if my_list[i] > my_list[i-1]:
		my_list[i-1], my_list[i] = my_list[i], my_list[i-1]
	i -= 1

print(f'Полученный массив {my_list}')

"""
6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. 
Каждый кортеж хранит информацию об отдельном товаре. 
В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения). 
Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
Пример готовой структуры:
[
(1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
(2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}), 
(3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
]
Необходимо собрать аналитику о товарах. 
Реализовать словарь, в котором каждый ключ — характеристика товара, например название, 
а значение — список значений-характеристик, например список названий товаров.
Пример:
{
“название”: [“компьютер”, “принтер”, “сканер”],
“цена”: [20000, 6000, 2000],
“количество”: [5, 2, 7],
“ед”: [“шт.”]
}
"""

goods = []

goods_analytics = {"название": [], "цена": [], "количество": [], "eд": []}

answer = ''

while answer =='' or answer:
	structure = {"название": None, "цена": None, "количество": None, "eд": None}
	answer = input(f'Введите данные товара номер {len(goods) + 1}. \nДля подверждения нажмите "Enter"\nДля выхода нажмите "0"')
	if answer == '0':
		break
	for key in structure:
		value = input(f'{key} ')
		structure[key] = value
		if value not in goods_analytics[key]:
			goods_analytics[key] += [value, ]

	goods.append((len(goods)+1, structure.copy()))

print(goods_analytics)